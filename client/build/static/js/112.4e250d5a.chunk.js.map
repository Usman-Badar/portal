{"version":3,"sources":["Components/EmployeeProtal/Dashboard/Pages/Store/Inventory_requests/Functions.js","Components/EmployeeProtal/Dashboard/Pages/Store/Inventory_requests/InventoryRequests.jsx"],"names":["getRequests","axios","setRequests","get","then","res","data","catch","err","console","log","GetComments","id","setComments","post","setTimeout","objDiv","document","getElementById","scrollTop","scrollHeight","UI","lazy","Sus","InventoryRequests","UserData","useSelector","state","EmpAuth","EmployeeData","useState","StartLoading","setStartLoading","Requests","Details","setDetails","Comments","useEffect","socket","on","request_id","parseInt","window","location","href","split","pop","content","CloseRequest","OpenRequest","index","accepted_by","obj","emp_id","newComment","e","preventDefault","comment","target","value","item_request_id","sender_id","sessionStorage","getItem","reset","emit","issueToInventory","issued_by","props","Load","Loading","display","styling","zIndex","icon","src","LoadingIcon","className","alt","txt","fallback"],"mappings":"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","file":"static/js/112.4e250d5a.chunk.js","sourcesContent":["export const getRequests = ( axios, setRequests ) => {\r\n\r\n    axios.get(\r\n        '/store/get_inventory_requests'\r\n    ).then(\r\n        res => {\r\n\r\n            setRequests( res.data );\r\n\r\n        }\r\n    ).catch(\r\n        err => {\r\n\r\n            console.log( err );\r\n\r\n        }\r\n    )\r\n\r\n}\r\n\r\nexport const OpenRequest = ( index, axios, accepted_by, Requests, setDetails, setComments, setStartLoading ) => {\r\n\r\n    let obj = Requests[index];\r\n    setStartLoading(true);\r\n    GetComments( axios, obj.request_id, setComments );\r\n\r\n    if ( !obj.accepted_by )\r\n    {\r\n        axios.post(\r\n            '/store/accept_inventory_request',\r\n            {\r\n                accepted_by: accepted_by,\r\n                request_id: obj.id\r\n            }\r\n        )\r\n    }\r\n    \r\n    axios.post(\r\n        '/store/inventory_request/details',\r\n        {\r\n            request_id: obj.id\r\n        }\r\n    ).then(\r\n        res => {\r\n\r\n            setStartLoading(false);\r\n            setDetails( res.data );\r\n\r\n        }\r\n    ).catch(\r\n        err => {\r\n\r\n            console.log( err );\r\n\r\n        }\r\n    )\r\n\r\n}\r\n\r\nexport const GetComments = ( axios, id, setComments ) => {\r\n\r\n    axios.post('/getitemrequestcomments', { id: id })\r\n    .then(\r\n        res => \r\n        {\r\n\r\n            setComments( res.data );\r\n            setTimeout(() => {\r\n                let objDiv = document.getElementById(\"comments_content\");\r\n                if (objDiv) {\r\n                    objDiv.scrollTop = objDiv.scrollHeight;\r\n                }\r\n            }, 500);\r\n\r\n        }\r\n    ).catch(\r\n        err => {\r\n\r\n            console.log(err);\r\n\r\n        }\r\n    );\r\n\r\n}\r\n\r\nexport const newComment = ( e, axios, request_id, socket, setComments ) => {\r\n\r\n    e.preventDefault();\r\n    axios.post(\r\n        '/newitemrequestcomment', \r\n        {\r\n            comment: e.target['comment'].value,\r\n            item_request_id: request_id,\r\n            sender_id: sessionStorage.getItem(\"EmpID\")\r\n        }\r\n    ).then(\r\n        () => {\r\n\r\n            document.getElementById('commentForm').reset();\r\n            GetComments( axios, request_id, setComments );\r\n            socket.emit( 'newitemrequestcomment', request_id );\r\n        \r\n        }\r\n    ).catch(\r\n        err => {\r\n\r\n            console.log( err );\r\n\r\n        }\r\n    );\r\n\r\n}\r\n\r\nexport const issueToInventory = ( request_id, id, axios, setDetails, setComments, setRequests ) => {\r\n\r\n    axios.post(\r\n        '/store/issue_items_to_inventory', \r\n        {\r\n            id: id,\r\n            request_id: request_id,\r\n            issued_by: sessionStorage.getItem(\"EmpID\")\r\n        }\r\n    ).then(\r\n        () => {\r\n\r\n            setDetails();\r\n            setComments([]);\r\n            getRequests( axios, setRequests );\r\n        \r\n        }\r\n    ).catch(\r\n        err => {\r\n\r\n            console.log( err );\r\n\r\n        }\r\n    );\r\n\r\n}","import React, { lazy, Suspense, useEffect, useState } from 'react';\r\n\r\n// CUSTOM LOADING COMPONENT\r\nimport Loading from '../../../../../UI/Loading/Loading';\r\nimport LoadingIcon from '../../../../../../images/loadingIcons/icons8-loading-circle.gif';\r\n\r\n// REACT REDUX\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getRequests, GetComments, issueToInventory, OpenRequest, newComment } from './Functions';\r\nimport axios from '../../../../../../axios';\r\nimport socket from '../../../../../../io';\r\n\r\nconst UI = lazy( () => import('./UI') );\r\n\r\nconst InventoryRequests = () => {\r\n\r\n    const UserData = useSelector( ( state ) => state.EmpAuth.EmployeeData );\r\n\r\n    const [ StartLoading, setStartLoading ] = useState(false);\r\n    const [ Requests, setRequests ] = useState();\r\n    const [ Details, setDetails ] = useState();\r\n    const [ Comments, setComments ] = useState([]);\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            getRequests( axios, setRequests );\r\n\r\n            socket.on(\r\n                'newitemrequestcomment', ( request_id ) => {\r\n                    \r\n                    if ( parseInt( request_id ) === parseInt( window.location.href.split('/').pop().split('=').pop() ) )\r\n                    {\r\n                        GetComments( axios, request_id, setComments );\r\n                    }\r\n            \r\n                }\r\n            )\r\n\r\n        }, []\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <Sus \r\n                content={ \r\n                    <UI \r\n                        Requests={ Requests }\r\n                        Details={ Details }\r\n                        Comments={ Comments }\r\n                        StartLoading={ StartLoading }\r\n\r\n                        CloseRequest={ () => { setComments([]); setDetails(); getRequests( axios, setRequests ); } }\r\n                        OpenRequest={ ( index ) => OpenRequest( index, axios, UserData.emp_id, Requests, setDetails, setComments, setStartLoading ) }\r\n                        newComment={ ( e ) => newComment( e, axios, Details[0][0].request_id, socket, setComments ) }\r\n                        issueToInventory={ ( request_id, id ) => issueToInventory( request_id, id, axios, setDetails, setComments, setRequests ) }\r\n                    /> \r\n                } \r\n            />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default InventoryRequests;\r\n\r\nconst Sus = ( props ) => {\r\n    \r\n    const Load = <Loading \r\n        display={ true }\r\n        styling={\r\n            {\r\n                zIndex: 100000\r\n            }\r\n        }\r\n        icon={ \r\n            <img \r\n                src={ LoadingIcon }\r\n                className=\"LoadingImg\"\r\n                alt=\"LoadingIcon\"\r\n            /> \r\n        }\r\n        txt=\"Please Wait\"\r\n    />\r\n\r\n    return <Suspense fallback={ Load }> { props.content } </Suspense>\r\n\r\n}"],"sourceRoot":""}