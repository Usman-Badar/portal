{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Components/EmployeeProtal/Dashboard/Pages/Procurement/ViewPurchaseOrder/Components/Home/Home.jsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Home","props","CanvasJS","CanvasJSReact","CanvasJSChart","useState","DataSet","setDataSet","MonthlyRequests","setMonthlyRequests","RequestsSplit","setRequestsSplit","MinMax","setMinMax","EmpData","setEmpData","TotalValue","setTotalValue","useEffect","count","rejected","approved","waiting","sent","viewed","x","CountStatus","length","push","y","label","companies","data","ViewRequest","includes","company_name","filter","val","total","parseFloat","company","ReactTooltip","rebuild","addColorSet","options","exportEnabled","animationEnabled","title","text","colorSet","type","startAngle","toolTipContent","showInLegend","legendText","indexLabelFontSize","indexLabel","dataPoints","className","CountRequests","keys","access","JSON","parse","toLocaleString","map","index","style","fontSize","display","marginRight","Math","max","min","totalCount","percent","height","month"],"mappings":"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","file":"static/js/58.028aa9f2.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport './Home.css';\r\nimport CanvasJSReact from '../../../../../../../../canvasjs.react';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Home = (props) => {\r\n\r\n    const CanvasJS = CanvasJSReact.CanvasJS;\r\n    const CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\n    const [DataSet, setDataSet] = useState([]);\r\n    const [MonthlyRequests, setMonthlyRequests] = useState([]);\r\n    const [RequestsSplit, setRequestsSplit] = useState([]);\r\n\r\n    const [MinMax, setMinMax] = useState([]);\r\n    const [EmpData, setEmpData] = useState({});\r\n    \r\n    const [TotalValue, setTotalValue] = useState(0.00);\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            // IMPORTANT VARIABLES\r\n            let count = [];\r\n            let rejected = 0;\r\n            let approved = 0;\r\n            let waiting = 0;\r\n            let sent = 0;\r\n            let viewed = 0;\r\n\r\n            // FOR REJECTED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Rejected') {\r\n                    rejected = rejected + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR APPROVED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Approved') {\r\n                    approved = approved + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR WAITING\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Waiting For Approval') {\r\n                    waiting = waiting + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR SENT\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Sent') {\r\n                    sent = sent + 1;\r\n                }\r\n\r\n            }\r\n\r\n            // FOR VIEWED\r\n            for (let x = 0; x < props.CountStatus.length; x++) {\r\n\r\n                if (props.CountStatus[x] === 'Viewed') {\r\n                    viewed = viewed + 1;\r\n                }\r\n\r\n            }\r\n\r\n            count.push(\r\n                { y: rejected, label: 'rejected' },\r\n                { y: approved, label: 'approved' },\r\n                { y: waiting, label: 'waiting' },\r\n                { y: sent, label: 'sent' },\r\n                { y: viewed, label: 'viewed' }\r\n            )\r\n            setDataSet( count );\r\n\r\n\r\n        }, [props.CountStatus]\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            setMonthlyRequests(props.MonthlyRequests);\r\n            let arr = [];\r\n\r\n            for ( let x = 0; x < props.MonthlyRequests.length; x++ )\r\n            {\r\n                arr.push( props.MonthlyRequests[x].count );\r\n            }\r\n\r\n            setMinMax( arr );\r\n\r\n        }, [props.MonthlyRequests]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            let companies = [];\r\n            let data = [];\r\n            for ( let x = 0; x < props.ViewRequest.length; x++ )\r\n            {\r\n                if ( !companies.includes( props.ViewRequest[x].company_name ) )\r\n                {\r\n                    companies.push( props.ViewRequest[x].company_name );\r\n                }\r\n            }\r\n\r\n            for ( let x = 0; x < companies.length; x++ )\r\n            {\r\n                let arr = props.ViewRequest.filter(\r\n                    ( val ) => {\r\n\r\n                        return val.company_name === companies[x];\r\n\r\n                    }\r\n                );\r\n\r\n                let total = 0.00;\r\n                for( let x = 0; x < arr.length; x++ )\r\n                {\r\n\r\n                    total = total + parseFloat( arr[x].total );\r\n\r\n                }\r\n\r\n                data.push(\r\n                    {\r\n                        company: companies[x],\r\n                        count: arr.length,\r\n                        total: total\r\n                    }\r\n                )\r\n            }\r\n\r\n            setRequestsSplit( data );\r\n\r\n            let total = 0.00;\r\n            for( let x = 0; x < props.ViewRequest.length; x++ )\r\n            {\r\n\r\n                total = total + parseFloat( props.ViewRequest[x].total );\r\n\r\n            }\r\n\r\n            setTotalValue( total );\r\n\r\n        }, [ props.ViewRequest ]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            setEmpData( props.EmpData );\r\n\r\n        }, [ props.EmpData ]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n\r\n            ReactTooltip.rebuild();\r\n\r\n        }\r\n    )\r\n\r\n    CanvasJS.addColorSet(\r\n        \"customShades\",\r\n        [//colorSet Array\r\n\r\n        \"#E7604A\",\r\n        \"#56CC82\",\r\n        \"#29C7CA\",\r\n        \"#5C6E9C\",\r\n        \"#5C6E9C\"             \r\n        ]\r\n    );\r\n\r\n    const options = {\r\n        exportEnabled: false,\r\n        animationEnabled: true,\r\n        title: {\r\n            text: \"Summery\"\r\n        },\r\n        colorSet: \"customShades\",\r\n        data: [{\r\n            type: \"pie\",\r\n            startAngle: 75,\r\n            toolTipContent: \"<b>{label}</b>: {y}%\",\r\n            showInLegend: \"true\",\r\n            legendText: \"{label}\",\r\n            indexLabelFontSize: 10,\r\n            indexLabel: \"{label} - {y}%\",\r\n            dataPoints: DataSet\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <ReactTooltip />\r\n            <div className=\"three\">\r\n                <div className=\"Calculate px-4\">\r\n                    <small className=\"text-secondary\">Total Requests</small>\r\n                    <h3 className=\"font-weight-bolder\">\r\n                        {props.CountRequests} <small className=\"text-secondary\">Received</small>\r\n                    </h3>\r\n                    {\r\n                        Object.keys(EmpData).length === 0\r\n                        ?\r\n                        null\r\n                        :\r\n                        EmpData.access ? JSON.parse(EmpData.access).includes(522) || JSON.parse(EmpData.access).includes(1)\r\n                        ?\r\n                            <>\r\n                                <small className=\"text-secondary\">Total Value Rs</small>\r\n                                <h3 className=\"font-weight-bolder\">\r\n                                    { TotalValue.toLocaleString('en-US') } <small className=\"text-secondary\">Estimated</small>\r\n                                </h3>\r\n                            </>\r\n                            :\r\n                            null\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                <div className=\"RequestStatusChart\">\r\n                    <CanvasJSChart options = {options}\r\n                        /* onRef={ref => this.chart = ref} */\r\n                    />\r\n                </div>\r\n                <div className=\"RequestStatusChart py-4 px-3\">\r\n                    {\r\n                        RequestsSplit.map(\r\n                            ( val, index ) => {\r\n\r\n                                return (\r\n                                    <div \r\n                                        className=\" mb-3\"\r\n                                        style={\r\n                                            {\r\n                                                fontSize: '13px'\r\n                                            }\r\n                                        }\r\n                                        key={ index }\r\n                                    >\r\n                                        <div className=\"font-weight-bold\">\r\n                                            {\r\n                                                val.company\r\n                                            }: \r\n                                        </div>\r\n                                        <div className=\"d-flex align-items-center justify-content-between\"> \r\n                                            <div>\r\n                                                {\r\n                                                    val.count\r\n                                                } <sub>Requests</sub>\r\n                                            </div>\r\n                                            <div>\r\n                                                PKR \r\n                                                <span className=\"ml-2\">\r\n                                                    {\r\n                                                        val.total.toLocaleString('en-US')\r\n                                                    } /-\r\n                                                </span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n\r\n                            }\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"graph\">\r\n                <div className='Heading'> <h4> Monthly Requests </h4> </div>\r\n                {\r\n                    MonthlyRequests.map(\r\n                        (val, index) => {\r\n\r\n                            let totalCount = 0;\r\n                            for (let x = 0; x < MonthlyRequests.length; x++) {\r\n                                totalCount = totalCount + MonthlyRequests[x].count;\r\n                            }\r\n\r\n                            let percent = (val.count / totalCount) * 85;\r\n\r\n                            return (\r\n                                <div\r\n                                    style={\r\n                                        {\r\n                                            height: percent + '%'\r\n                                        }\r\n                                    }\r\n                                    className='GraphItem'\r\n                                    data-tip={val.month + ' ' + val.year} key={index}\r\n                                >\r\n                                    <div> {val.count} </div>\r\n                                </div>\r\n                            )\r\n\r\n                        }\r\n                    )\r\n                }\r\n            </div> */}\r\n            <div className=\"ViewPrRequests_graph\">\r\n                <div className=\"border-bottom mb-3\"><h4>Monthly Requests</h4></div>\r\n                <div className=\"d-flex\">\r\n                    <div style={{ display: \"grid\", marginRight: \"10px\" }} >\r\n                        <p className=\"font-weight-bolder\">{Math.max(...MinMax)}</p>\r\n                        <p className=\"d-flex align-items-end font-weight-bolder\">{Math.min(...MinMax)}</p>\r\n                    </div>\r\n                    <div className=\"ViewPrRequests_graphdiv\">\r\n                        <div className=\"graph_data \">\r\n                            <div className=\"Graph_Bargrid\">\r\n                                {\r\n                                    MonthlyRequests.map(\r\n                                        (val, index) => {\r\n\r\n                                            let totalCount = 0;\r\n\r\n                                            for (let x = 0; x < MonthlyRequests.length; x++) {\r\n                                                totalCount = totalCount + MonthlyRequests[x].count;\r\n                                            }\r\n\r\n                                            let percent = (val.count / totalCount) * 100;\r\n\r\n                                            return (\r\n                                                <>\r\n                                                    <div key={ index } className=\"graphbar\" style={{ height: percent + '%' }}>\r\n                                                        <div className=\"tooltip\">{val.count} Requests</div>\r\n                                                    </div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <div className=\"Graph_monthgrid\">\r\n                                {\r\n                                     MonthlyRequests.map(\r\n                                        (val, index) => {\r\n\r\n                                            return (\r\n                                                <>\r\n                                                    <div key={ index }>{val.month}</div>\r\n                                                </>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"graphyear\">\r\n                    2022\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;"],"sourceRoot":""}