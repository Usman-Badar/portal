{"version":3,"sources":["Components/EmployeeProtal/Dashboard/Pages/Chat/Components/DailyChat/DailyChat.jsx"],"names":["DailyChat","React","memo","props","useState","Chat","setChat","LoadingState","setLoadingState","Date","Calender","setCalender","EmpID","setEmpID","ChatEmployee","setChatEmployee","CurrentEmployeeData","setCurrentEmployeeData","useEffect","className","src","loading","alt","width","height","map","val","index","encryptor","decrypt","chat_body","includes","split","chatDate","send_date","content","toDateString","prevDate","currDate","sender_id","name","read_status","style","fontSize","tConvert","send_time"],"mappings":"oLAKMA,EAAYC,IAAMC,MAEpB,SAAEC,GAEE,MAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA0CF,oBAAS,GAAnD,mBAAQG,EAAR,KAAsBC,EAAtB,KACA,EAAkCJ,mBAAU,IAAIK,MAAhD,mBAAQC,EAAR,KAAkBC,EAAlB,KACA,EAA4BP,qBAA5B,mBAAQQ,EAAR,KAAeC,EAAf,KACA,EAA0CT,mBAAS,IAAnD,mBAAQU,EAAR,KAAsBC,EAAtB,KACA,EAAwDX,mBAAS,IAAjE,mBAAQY,EAAR,KAA6BC,EAA7B,KAeA,OAbAC,qBACI,WAEIV,EAAiBL,EAAMI,cACvBD,EAASH,EAAME,MACfM,EAAaR,EAAMO,UACnBG,EAAUV,EAAMS,OAChBG,EAAiBZ,EAAMW,cACvBG,EAAwBd,EAAMa,uBAE/B,CAAEb,EAAMI,aAAcJ,EAAME,KAAMF,EAAMO,SAAUP,EAAMS,MAAOT,EAAMW,aAAcX,EAAMa,sBAI5F,qCACI,qBAAKG,UAAYZ,EAAe,2BAA6B,kCAA7D,SACI,qBACIa,IAAMC,IACNC,IAAI,mBACJC,MAAM,KACNC,OAAO,KACPL,UAAU,qBAIdd,EAAKoB,KACD,SAACC,EAAKC,GAEF,IAAIP,EAAM,GACNjB,EAAMyB,UAAUC,QAAQH,EAAII,WAAWC,SAAS,UAChDX,EAAMjB,EAAMyB,UAAUC,QAAQH,EAAII,WAAWE,MAAM,QAAQ,GAAGA,MAAM,OAAO,IAI/E,IAAMC,EAAW,IAAIxB,KAAKiB,EAAIQ,WAE1BC,EAAU,KACd,GAAIzB,EAAS0B,kBAAmB,IAAI3B,MAAO2B,eACvC,GAAIT,EAAQ,GAAK,EAAG,CAEhB,IAAIU,EAAW,IAAI5B,KAAKJ,EAAKsB,EAAQ,GAAGO,WAAWE,eAC/CE,EAAW,IAAI7B,KAAKJ,EAAKsB,GAAOO,WAAWE,eAE3CE,IAAaD,IACbF,EAAU,oBAAGhB,UAAU,YAAb,cAA2BmB,WAGxB,IAAVX,IACPQ,EAAU,oBAAGhB,UAAU,YAAb,cAA2B,IAAIV,KAAKJ,EAAKsB,GAAOO,WAAWE,mBAI7E,OACI,mCAEQ1B,EAAS0B,kBAAmB,IAAI3B,MAAO2B,eAEnC,qCACKD,EACD,sBAAiBhB,UAAWO,EAAIa,YAAc3B,EAAQ,QAAU,cAAhE,UACI,oBAAGO,UAAU,UAAb,cAAyBO,EAAIa,YAAc3B,EAAQE,EAAa0B,KAAOxB,EAAoBwB,QAC3F,qBAAKrB,UAAU,WAAf,SAEZhB,EAAMyB,UAAUC,QAAQH,EAAII,WAAWC,SAAS,QAE5C,qBACIX,IAAK,gBAAkBA,EACvBG,MAAM,OACNC,OAAO,OACPF,IAAI,qBAGR,mCACKnB,EAAMyB,UAAUC,QAAQH,EAAII,eAIzB,oBAAGX,UAAU,YAAb,UAEZO,EAAIa,YAAc3B,EAEd,KAEA,mCAE4B,SAApBc,EAAIe,YAEA,mBAAGC,MAAO,CAAEC,SAAU,mBAAqBxB,UAAU,6BAErD,mBAAGuB,MAAO,CAAEC,SAAU,mBAAqBxB,UAAU,wBAIpDhB,EAAMyC,SAASlB,EAAImB,gBAlClBlB,MAuCdM,EAASG,iBAAmB1B,EAAS0B,eAEjC,mCACI,sBAAiBjB,UAAWO,EAAIa,YAAc3B,EAAQ,QAAU,cAAhE,UACI,oBAAGO,UAAU,UAAb,cAAyBO,EAAIa,YAAc3B,EAAQE,EAAa0B,KAAOxB,EAAoBwB,QAC3F,qBAAKrB,UAAU,WAAf,SAEZhB,EAAMyB,UAAUC,QAAQH,EAAII,WAAWC,SAAS,QAE5C,qBACIX,IAAK,gBAAkBA,EACvBG,MAAM,OACNC,OAAO,OACPF,IAAI,qBAGR,mCACKnB,EAAMyB,UAAUC,QAAQH,EAAII,eAIzB,oBAAGX,UAAU,YAAb,UAEQ,SAApBO,EAAIe,YAEA,mBAAGC,MAAO,CAAEC,SAAU,mBAAqBxB,UAAU,6BAErD,mBAAGuB,MAAO,CAAEC,SAAU,mBAAqBxB,UAAU,sBAE5DhB,EAAMyC,SAASlB,EAAImB,gBA1BElB,KA+Bd,gBAcjC3B","file":"static/js/73.4f00a685.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport './DailyChat.css';\r\nimport loading from '../../../../../../../images/loadingIcons/icons8-iphone-spinner.gif';\r\n\r\nconst DailyChat = React.memo(\r\n\r\n    ( props ) => {\r\n\r\n        const [ Chat, setChat ] = useState([]);\r\n        const [ LoadingState, setLoadingState ] = useState(false);\r\n        const [ Calender, setCalender ] = useState( new Date() );\r\n        const [ EmpID, setEmpID ] = useState();\r\n        const [ ChatEmployee, setChatEmployee ] = useState({});\r\n        const [ CurrentEmployeeData, setCurrentEmployeeData ] = useState({});\r\n\r\n        useEffect(\r\n            () => {\r\n\r\n                setLoadingState( props.LoadingState )\r\n                setChat( props.Chat )\r\n                setCalender( props.Calender )\r\n                setEmpID( props.EmpID )\r\n                setChatEmployee( props.ChatEmployee )\r\n                setCurrentEmployeeData( props.CurrentEmployeeData )\r\n\r\n            }, [ props.LoadingState, props.Chat, props.Calender, props.EmpID, props.ChatEmployee, props.CurrentEmployeeData ]\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <div className={ LoadingState ? \"LoadingStateForDailyChat\" : \"LoadingStateForDailyChat d-none\" }>\r\n                    <img \r\n                        src={ loading } \r\n                        alt=\"Please wait.....\" \r\n                        width=\"50\" \r\n                        height=\"50\" \r\n                        className=\"rounded-circle\"\r\n                    />\r\n                </div>\r\n                {\r\n                    Chat.map(\r\n                        (val, index) => {\r\n\r\n                            let src = '';\r\n                            if (props.encryptor.decrypt(val.chat_body).includes('/***')) {\r\n                                src = props.encryptor.decrypt(val.chat_body).split('/***')[1].split('***')[0];\r\n                            }\r\n\r\n\r\n                            const chatDate = new Date(val.send_date);\r\n\r\n                            let content = null;\r\n                            if (Calender.toDateString() === new Date().toDateString()) {\r\n                                if (index - 1 >= 0) {\r\n\r\n                                    let prevDate = new Date(Chat[index - 1].send_date).toDateString();\r\n                                    let currDate = new Date(Chat[index].send_date).toDateString();\r\n\r\n                                    if (currDate !== prevDate) {\r\n                                        content = <p className=\"TweetDate\"> {currDate}</p>\r\n                                    }\r\n\r\n                                } else if (index === 0) {\r\n                                    content = <p className=\"TweetDate\"> {new Date(Chat[index].send_date).toDateString()}</p>\r\n                                }\r\n                            }\r\n\r\n                            return (\r\n                                <>\r\n                                    {\r\n                                        Calender.toDateString() === new Date().toDateString()\r\n                                            ?\r\n                                            <>\r\n                                                {content}\r\n                                                <div key={index} className={val.sender_id !== EmpID ? \"Tweet\" : \"Tweet owner\"}>\r\n                                                    <p className=\"Tweeter\"> {val.sender_id !== EmpID ? ChatEmployee.name : CurrentEmployeeData.name}</p>\r\n                                                    <div className=\"TweetBox\">\r\n                                                        {\r\n                                        props.encryptor.decrypt(val.chat_body).includes('/***')\r\n                                            ?\r\n                                            <img\r\n                                                src={'images/drive/' + src}\r\n                                                width=\"100%\"\r\n                                                height=\"auto\"\r\n                                                alt=\"drive attachment\"\r\n                                            />\r\n                                            :\r\n                                            <>\r\n                                                {props.encryptor.decrypt(val.chat_body)}\r\n                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                    <p className=\"TweetTime\">\r\n                                                        {\r\n                                        val.sender_id !== EmpID\r\n                                            ?\r\n                                            null\r\n                                            :\r\n                                            <>\r\n                                                {\r\n                                                    val.read_status === 'Read'\r\n                                                        ?\r\n                                                        <i style={{ fontSize: '12px !important' }} className=\"las la-check-double mr-1\"></i>\r\n                                                        :\r\n                                                        <i style={{ fontSize: '12px !important' }} className=\"las la-check mr-1\"></i>\r\n                                                }\r\n                                            </>\r\n                                                        }\r\n                                                        {props.tConvert(val.send_time)}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </>\r\n                                            :\r\n                                            chatDate.toDateString() === Calender.toDateString()\r\n                                                ?\r\n                                                <>\r\n                                                    <div key={index} className={val.sender_id !== EmpID ? \"Tweet\" : \"Tweet owner\"}>\r\n                                                        <p className=\"Tweeter\"> {val.sender_id !== EmpID ? ChatEmployee.name : CurrentEmployeeData.name}</p>\r\n                                                        <div className=\"TweetBox\">\r\n                                        {\r\n                                            props.encryptor.decrypt(val.chat_body).includes('/***')\r\n                                                ?\r\n                                                <img\r\n                                                    src={'images/drive/' + src}\r\n                                                    width=\"100%\"\r\n                                                    height=\"auto\"\r\n                                                    alt=\"drive attachment\"\r\n                                                />\r\n                                                :\r\n                                                <>\r\n                                                    {props.encryptor.decrypt(val.chat_body)}\r\n                                                </>\r\n                                        }\r\n                                                        </div>\r\n                                                        <p className=\"TweetTime\">\r\n                                        {\r\n                                            val.read_status === 'Read'\r\n                                                ?\r\n                                                <i style={{ fontSize: '12px !important' }} className=\"las la-check-double mr-1\"></i>\r\n                                                :\r\n                                                <i style={{ fontSize: '12px !important' }} className=\"las la-check mr-1\"></i>\r\n                                        }\r\n                                        {props.tConvert(val.send_time)}\r\n                                                        </p>\r\n                                                    </div>\r\n                                                </>\r\n                                                :\r\n                                                null\r\n                                    }\r\n                                </>\r\n                            )\r\n\r\n                        }\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n)\r\n\r\nexport default DailyChat;"],"sourceRoot":""}